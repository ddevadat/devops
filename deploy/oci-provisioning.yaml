---
- name: Create Network
  collections: 
    - oracle.oci
  hosts: localhost
  vars:
    vcn_cidr_block: "10.90.0.0/16"
    vlan_cidr_block: "10.90.1.0/24"
    vcn_name: "SunbirdEd-VCN"
    vcn_dns_label: "sunbirded"
    compartment_id: "{{ lookup('env', 'COMPARTMENT_OCID') }}"
    quad_zero_route: "0.0.0.0/0"

  tasks: 
  - name: Check pre-requisites
    fail:
      msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
    when: item not in ansible_env
    with_items:
      - "COMPARTMENT_OCID"

  - name: Create a VCN
    oci_network_vcn:
      compartment_id: "{{ compartment_id }}"
      display_name: "{{ vcn_name }}"
      cidr_block: "{{ vcn_cidr_block }}"
      dns_label: "{{ vcn_dns_label }}"
    register: result
    tags:
      - network

  - set_fact:
      vcn_id: "{{ result.vcn.id }}"
      vcn: "{{ result.vcn }}"
      cacheable: yes
    tags:
      - network

  - name: Get availability domains for vlans
    oci_identity_availability_domain_facts:
      compartment_id: "{{compartment_id}}"
    register: oci_ads
    tags:
      - always

  - name: Get all services
    oci_network_service_facts:
    register: oci_services
    tags:
      - always

  - set_fact:
      availability_domain: "{{oci_ads.availability_domains[0].name}}"
      oci_all_service_id: "{{oci_services.services[1].id}}"
      oci_all_service_cidr: "{{oci_services.services[1].cidr_block}}"
    tags:
      - always

  - name: Create a new Internet Gateway
    oci_network_internet_gateway:
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      name: "IG"
      is_enabled: 'yes'
      state: 'present'
    register: result
    tags:
      - network

  - set_fact:
      ig_id: "{{ result.internet_gateway.id }}"
      public_route_table_rules:
        - cidr_block: "{{ quad_zero_route }}"
          network_entity_id: "{{ result.internet_gateway.id }}"
    tags:
      - network

  - name: Create a new NAT Gateway
    oci_network_nat_gateway:
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      name: "NG"
      state: 'present'
    register: result
    tags:
      - network

  - set_fact:
      ng_id: "{{ result.nat_gateway.id }}"
      private_route_table_rules:
        - cidr_block: "{{ quad_zero_route }}"
          network_entity_id: "{{ result.nat_gateway.id }}"
    tags:
      - network

  - name: Create a new Service Gateway
    oci_network_service_gateway:
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      services:  
        - service_id: "{{oci_all_service_id}}"
      display_name: "SVC_GW"
      state: 'present'
    register: result
    tags:
      - network


  - name: Create route table to connect internet gateway to the VCN
    oci_network_route_table:
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      name: "PUB-SL-RT"
      route_rules: "{{ public_route_table_rules }}"
      state: 'present'
    register: result
    tags:
      - network

  - set_fact:
      public_rt_id: "{{ result.route_table.id }}"
    tags:
      - network

  - name: Create route table to connect Nat gateway to the VCN
    oci_network_route_table:
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      name: "PVT-SL-RT"
      route_rules: "{{ private_route_table_rules }}"
      state: 'present'
    register: result
    tags:
      - network

  - set_fact:
      private_rt_id: "{{ result.route_table.id }}"
    tags:
      - network

  - name: Create security list for K8S API
    oci_network_security_list:
      display_name: K8S-API-SL
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      egress_security_rules:
      - description: "Allow outgoing traffic"
        destination: "{{ quad_zero_route }}"
        protocol: "all"
        destination_type: CIDR_BLOCK
        is_stateless: false
      - description: "Allow outgoing traffic to OCI services"
        destination: "{{oci_all_service_cidr}}"
        destination_type: SERVICE_CIDR_BLOCK
        protocol: "all"
        is_stateless: false
      ingress_security_rules:
      - description: "Allow kube api ep access from within the vcn"
        protocol: 6
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        tcp_options:
          destination_port_range:
            max: 6443
            min: 6443
      - description: "Allow kubelet access from within the vcn"
        protocol: 6
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        tcp_options:
          destination_port_range:
            max: 12250
            min: 12250
      - description: "Path Discovery"
        protocol: 1
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        icmp_options:
          type: 3
          code: 4
    register: result
    tags:
      - network
      - k8s
  - set_fact:
      k8s_security_list_id: "{{ result.security_list.id }}"
      cacheable: yes
    tags:
      - network
      - k8s

  - name: Create security list for K8S Worker
    oci_network_security_list:
      display_name: K8S-Worker-SL
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      egress_security_rules:
      - description: "Allow outgoing traffic"
        destination: "{{ quad_zero_route }}"
        protocol: "all"
        destination_type: CIDR_BLOCK
        is_stateless: false
      ingress_security_rules:
      - description: "Allow  access from within the vcn"
        protocol: 6
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
      - description: "Path Discovery"
        protocol: 1
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        icmp_options:
          type: 3
          code: 4
    register: result
    tags:
      - network
      - k8s
  - set_fact:
      k8s_worker_list_id: "{{ result.security_list.id }}"
      cacheable: yes
    tags:
      - network
      - k8s

  - name: Create a Subnet for K8S API
    oci_network_subnet:
      cidr_block: "{{ vlan_cidr_block }}"
      compartment_id: "{{ compartment_id }}"
      display_name: "K8S-API-SN"
      route_table_id: "{{ private_rt_id }}"
      security_list_ids:
        - "{{k8s_security_list_id}}"
      dns_label: "k8sapi"
      prohibit_public_ip_on_vnic: yes
      vcn_id: "{{ vcn_id }}"
    register: result
    tags:
      - network
      - k8s

  - name: Create a Subnet for K8S Woker
    oci_network_subnet:
      cidr_block: "{{ vlan_cidr_block }}"
      compartment_id: "{{ compartment_id }}"
      display_name: "K8S-WORKER-SN"
      route_table_id: "{{ private_rt_id }}"
      security_list_ids:
        - "{{k8s_worker_list_id}}"
      dns_label: "k8sworker"
      prohibit_public_ip_on_vnic: yes
      vcn_id: "{{ vcn_id }}"
    register: result
    tags:
      - network
      - k8s
