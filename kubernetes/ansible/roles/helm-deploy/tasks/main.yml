# This variable will get injected to nginx resolver config
# There is no native helm way to do this. So it's
# kind of a workaround
- name: getting kube dns ip
  shell: kubectl get service --namespace kube-system kube-dns -o jsonpath="{.spec.clusterIP}"
  register: kube_dns_ip

- name: setting variable
  set_fact:
    kube_dns_ip: "{{ kube_dns_ip.stdout }}"

- name: rename template
  template:
    src: "{{ chart_path }}/values.j2"
    dest: "{{ chart_path }}/values.yaml"

- name: template schema json
  template:
    src: "{{ item }}"
    dest: "{{ item }}"
  with_fileglob:
    - "{{ chart_path }}/config/*.json"
  when: release_name == "keycloak"

- name: template schema json
  template:
    src: "{{ item }}"
    dest: "{{ item }}"
  with_fileglob:
    - "{{ chart_path }}/schemas/*.json"
  when: release_name == "registry"

- name: template config json
  template:
    src: "{{ item }}"
    dest: "{{ item }}"
  with_fileglob:
    - "{{ chart_path }}/configs/*.json"
  when: release_name == "certificatesign"

- name: helm install
  shell: helm upgrade --install --atomic --timeout {{helm_install_timeout | d("10m")}} {{ release_name }} {{ chart_path }} -n {{namespace}}

- name: Get the deployment rollout status
  shell: "kubectl get deployments -A | grep -i {{ release_name }} | if [[ $(wc -l) > 0 ]]; then awk '{print $3}' | awk -F/ '{if ($1 ~ $2){exit 0} else {exit 1}}'; else exit 1; fi"
  args:
    executable: /bin/bash
  register: deployment_result
  ignore_errors: true

- name: Get deployed image name - deployments
  shell: kubectl get deployments.apps {{ release_name }} -o json -n {{ namespace }} | jq -r '.spec.template.spec.containers[0].image | split("/")[-1]'
  register: image

- set_fact:
   deployed_image: "{{ image }}"

- name: Get the daemonset rollout status
  shell: "kubectl get daemonsets -A | grep -i {{ release_name }} | if [[ $(wc -l) > 0 ]]; then awk '{print $3}' | awk -F/ '{if ($1 ~ $2){exit 0} else {exit 1}}'; else exit 1; fi"
  args:
    executable: /bin/bash
  register: daemonset_result
  ignore_errors: true

- name: Get deployed image name - daemonsets
  shell: kubectl get daemonsets {{ release_name }} -o json -n {{ namespace }} | jq -r '.spec.template.spec.containers[].image | split("/")[-1]'
  register: image

- set_fact:
   deployed_image: "{{ image if image.stdout_lines | length > 0 else deployed_image }}"

- name: Get the statefulset rollout status
  shell: "kubectl get statefulsets -A | grep -i {{ release_name }} | if [[ $(wc -l) > 0 ]]; then awk '{print $3}' | awk -F/ '{if ($1 ~ $2){exit 0} else {exit 1}}'; else exit 1; fi"
  args:
    executable: /bin/bash
  register: statefulset_result
  ignore_errors: true

- name: Get deployed image name - statefulsets
  shell: kubectl get statefulsets {{ release_name }} -o json -n {{ namespace }} | jq -r '.spec.template.spec.containers[].image | split("/")[-1]'
  register: image

- set_fact:
   deployed_image: "{{ image if image.stdout_lines | length > 0 else deployed_image }}"

- name: fail when deployment or daemonset or statefulset are not successful
  fail:
    msg: "Unable to get success status for any of these - deployment, daemonset, statefulset"
  when: statefulset_result.rc != 0 and daemonset_result.rc != 0 and deployment_result.rc != 0

- set_fact:
   metadata_image: "{{ image_name }}:{{ image_tag }}"

- debug:
    msg: "deployed image: {{ deployed_image.stdout }}"

