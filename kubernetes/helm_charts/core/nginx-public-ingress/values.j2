#jinja2:lstrip_blocks: True

namespace: {{ namespace }}
service:
  annotations: {{nginx_public_ingress_service_annotations | d('')  | to_json}}
  type: {{ nginx_public_ingress_type | default('LoadBalancer') }}
  {% if nginx_public_ingress_ip is defined %}
  nginx_public_ingress_ip: {{ nginx_public_ingress_ip }}
  {% endif %}
  ports:
  - port: 80
    name: http
    targetPort: 80
    nodePort: 31380
  - port: 443
    name: https
    targetPort: 443
    nodePort: 31390

{% if nginx_volumes is defined and nginx_volumes %}
{#
This is for custom nginx volume mount options in common.yaml
example:
nginx_volumes:
  volumes:
    - name: tls
      secret:
        secretName: ingress-cert
    - name: proxy-config
      configMap:
        name: proxy-default
    - name: nginx-config
      configMap:
        name: nginx-conf
  volumemounts:
    - name: tls
      mountPath: /etc/secrets
      readOnly: true
    - name: proxy-config
      mountPath: /etc/nginx/conf.d/default.conf
      subPath: proxy.default.conf
      readOnly: true
    - name: nginx-config
      mountPath: /etc/nginx/nginx.conf
      subPath: nginx.conf
      readOnly: true
#}
volumes: {{ nginx_volumes.volumes | to_json }}
volumeMounts: {{ nginx_volumes.volumeMounts | to_json }}
{% endif %}

imagepullsecrets: {{ imagepullsecrets }}
dockerhub: {{ dockerhub }}

resources:
  requests:
    cpu: {{proxy_cpu_req|default('100m')}}
    memory: {{proxy_mem_req|default('100Mi')}}
  limits:
    cpu: {{proxy_cpu_limit|default('1')}}
    memory: {{proxy_mem_limit|default('1024Mi')}}

repository: {{image_name|default('sunbird-rc-nginx')}}
image_tag: {{ image_tag }}

proxyconfig: |-
  {% if proto=='https' %}
  server {
    listen 80;
    listen [::]:80;
    server_name {{ proxy_server_name }};
    {#
    custom nginx server config section
    eg:
    nginx_server_config: |
      if ($allowed_country = no) {
          return 444;
      }
    #}
{% if nginx_server_config is defined and nginx_server_config %}
  {{ nginx_server_config | indent( width=4, indentfirst=True)  }}
{% endif %}
    # Limitting open connection per ip
    limit_conn limitbyaddr {{ nginx_per_ip_connection_limit }};
    return 301 https://{{ proxy_server_name }}$request_uri;
  }
  {% endif %}
  server {
  {% if proto=='http' %}
    listen                80;
    listen    [::]:80;
  {% else %}
    listen                443 ssl;
    ssl_certificate       /etc/secrets/site.crt;
    ssl_certificate_key   /etc/secrets/site.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA HIGH !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
  {% endif  %}
    server_name *.{{ proxy_server_name }} {{ proxy_server_name }};
    {#
    custom nginx server config section
    eg:
    nginx_server_config: |
      if ($allowed_country = no) {
          return 444;
      }
    #}
{% if nginx_server_config is defined and nginx_server_config %}
  {{ nginx_server_config | indent( width=6, indentfirst=True)  }}
{% endif %}
    # Limitting open connection per ip
    limit_conn limitbyaddr {{ nginx_per_ip_connection_limit }};
    proxy_set_header    Host              $host;
    proxy_set_header    X-Real-IP         {{ nginx_client_public_ip_header | d('$remote_addr') }};
    proxy_set_header    X-Forwarded-SSL   on;
    proxy_set_header    X-Forwarded-Proto $scheme;
    ignore_invalid_headers off;  #pass through headers from Jenkins which are considered invalid by Nginx server.
    resolver {{ kube_dns_ip }} valid=30s;

    # Admin API Endpoints for sunbird realm fpr forgot password flow
    location ~ /auth/admin/realms/sunbird/users/ {
      rewrite ^/auth/(.*) /auth/$1 break;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP {{ nginx_client_public_ip_header | d('$remote_addr') }};
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Forwarded-For   {{ nginx_client_public_ip_header | d('$remote_addr') }};
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_http_version 1.1;
      proxy_pass http://keycloak;
    }
    # Sunbird realm keycloak API endpoints
    location ~ /auth/realms/sunbird/(get-required-action-link|login-actions/(action-token|authenticate|required-action)|protocol/openid-connect/(auth|certs|logout|token|userinfo)|.well-known/openid-configuration) {
      rewrite ^/auth/(.*) /auth/$1 break;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP {{ nginx_client_public_ip_header | d('$remote_addr') }};
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Forwarded-For   {{ nginx_client_public_ip_header | d('$remote_addr') }};
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_http_version 1.1;
      proxy_pass http://keycloak;
    }
    # Static Assets for keycloak endpoints with caching
    location ~ /auth/(resources/(.+\.(png|svg|ico|js|eot|ttf|woff|woff2|css))|welcome-content/(.+\.(png|svg|ico|js|eot|ttf|woff|woff2|css))) {
      # Enabling caching
      proxy_cache_key $proxy_host$request_uri;
      proxy_cache {{proxy_cache_path.small_cache.keys_zone.split(':') | first}};
      add_header X-Proxy-Cache $upstream_cache_status;
      add_header X-Proxy-Cache-Date $upstream_http_date;
      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
      proxy_cache_revalidate on;
      proxy_cache_background_update on;
      proxy_cache_lock on;
      proxy_cache_valid 200 {{proxy_cache_valid.long_validity}};
      rewrite ^/auth/(.*) /auth/$1 break;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP {{ nginx_client_public_ip_header | d('$remote_addr') }};
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Forwarded-For   {{ nginx_client_public_ip_header | d('$remote_addr') }};
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_http_version 1.1;
      proxy_pass http://keycloak;
    }

    {# Including custom configuration #}
    {{ proxy_custom_config }}}

nginxconfig: |
  user  nginx;
  worker_processes  {{nginx_worker_processes | d("auto")}};
  {#
  Can add custom modules like
  eg:
  nginx_modules: |
      load_module modules/ngx_http_geoip2_module.so;
      load_module modules/ngx_stream_geoip2_module.so;
  #}
{% if nginx_modules is defined and nginx_modules %}
  {{ nginx_modules | indent( width=2, indentfirst=True)  }}
{% endif %}
  error_log  /var/log/nginx/error.log warn;
  pid        /var/run/nginx.pid;
  events {
      worker_connections  10000;
  }
  http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;
      resolver {{ kube_dns_ip }} valid=30s;
      {#
      This is to define custom nginx_http_configs
      for example
      nginx_http_config: |
        geoip2 /usr/local/share/GeoLite2-Country.mmdb {
            $geoip2_data_country_iso_code country iso_code;
        }
        map $geoip2_data_country_iso_code $allowed_country {
        default no;
            IN  no;
        }
      #}
{% if nginx_http_config is defined and nginx_http_config %}
  {{ nginx_http_config | indent( width=7, indentfirst=True)  }}
{% endif %}
      log_format  main  '{{ nginx_client_public_ip_header | d('$remote_addr') }} - $remote_user [$time_local] '
                        '"$request" $status $request_length $body_bytes_sent'
                        ' $request_time $upstream_response_time $pipe'
                        ' "$http_referer" "$http_user_agent" "$sb_request_id"'
                        ' "$http_x_device_id" "$http_x_channel_id" "$http_x_app_id"'
                        ' "$http_x_app_ver" "$http_x_session_id" {{nginx_additional_log_fields | default("")}}';
      access_log  /var/log/nginx/access.log  main;




      sendfile        on;
      #tcp_nopush     on;
      client_max_body_size 60M;
      keepalive_timeout  65s;
      keepalive_requests 200;
      # Nginx connection limit per ip
      limit_conn_zone $binary_remote_addr zone=limitbyaddr:10m;
      limit_conn_status 429;
      upstream keycloak {
          server keycloak-service:8080
          keepalive 1000;
      }

      include /etc/nginx/defaults.d/*.conf;
      include /etc/nginx/conf.d/*.conf;
      #################
      # Caching Block #
      #################
      #
      # Keywords
      #
      # proxy_cache_path: path to store the cache content
      # level: how many directories we need, 1:2 means 1 parent directory, and another child directory before the cache content.
      # keys_zone: name of the cache and size of the keys store in RAM; 1â€‘MB zone can store data for about 8,000 keys
      # max_size: size of the cache content in disk
      # inactive: specifies how long an item can remain in the cache without being accessed. This doesn't value expiry time of cache. So keep it more than the expiry.
      # use_temp_path: do we have to write the cache to a temp path first? This will reduce the performance.
      #
      # caching for images and files
      {% for key,value in proxy_cache_path.items() %}
      proxy_cache_path {{value['path']}} levels={{value['levels']}} keys_zone={{value['keys_zone']}} max_size={{value['max_size']}} inactive={{value['inactive']}} use_temp_path=off;
      {% endfor %}

     server {
       listen 9145;
       location /metrics {
         content_by_lua_block {
            metric_connections:set(ngx.var.connections_reading, {"reading"})
            metric_connections:set(ngx.var.connections_waiting, {"waiting"})
            metric_connections:set(ngx.var.connections_writing, {"writing"})
            prometheus:collect()
          }
       }
     }
  }


compressionConfig: |-
  # Compression
  gzip on;
  gzip_comp_level    5;
  gzip_min_length    256; # 256Bytes
  gzip_proxied       any;
  gzip_vary          on;
  # Content types for compression
  gzip_types
  application/atom+xml
  application/javascript
  application/json
  application/ld+json
  application/manifest+json
  application/rss+xml
  application/vnd.geo+json
  application/vnd.ms-fontobject
  application/x-font-ttf
  application/x-web-app-manifest+json
  application/xhtml+xml
  application/xml
  font/opentype
  image/bmp
  image/svg+xml
  image/x-icon
  text/cache-manifest
  text/css
  text/plain
  ;

serviceMonitor:
  enabled: true
  labels: # labels with which the prometheus choose the serviceMonitor
    app: prometheus-operator
    release: prometheus-operator

